String cron_string = "0 0 */20 * *" // cron every 20th of the month
def status = ''
def currentTicketNumber;

def createStage(stageName, jobName) {

  script {
      try {

        stage("${stageName}") {

          build job: "${jobName}"

        }
        // slackSend(channel: "#channelName", message: "Message")
      } catch (Exception e) {

        println(e.getMessage());
        // slackSend(channel: "#channelName", message: "Message")


        throw e;

      }

  }

}

pipeline {
  agent none
  triggers {
    cron(cron_string)
  }
  parameters {

    string(name: 'JIRA_TICKET_NUMBER', description: 'Jira Ticket Number')
    string(name: 'FIELD_PATH', description: 'Field on the Jira Issue to Watch')
    string(name: 'FIELD_TARGET_VALUE', description: 'Field target value when trigger the job')
  }

  stages {
    stage('check the jira field status') {
      agent any
      steps {
       withCredentials([[
            $class: 'UsernamePasswordMultiBinding',
            credentialsId: "jira-creds",
            usernameVariable: 'JIRA_USERNAME',
            passwordVariable: 'JIRA_API_TOKEN',
        ]]) {
            
          script {
            
            // to store the current ticket number
            currentTicketNumber = params.JIRA_TICKET_NUMBER;

            

            // if the previousticketNumber is there and the current ticket number is empty
            def previousticketNumber = currentBuild.previousBuild.buildVariables["ticketNumber"];
            if(previousticketNumber && (currentTicketNumber == null || currentTicketNumber.length() == 0)){

              currentTicketNumber = currentBuild.previousBuild.buildVariables["ticketNumber"];
            }

            // store in env to get the value from the previousbuild 
            env.ticketNumber = currentTicketNumber
            // run the script to poll for the status of the field from Jira.
            if(currentTicketNumber){

              status = sh(returnStdout: true, script: "python3 scripts/check_status_field.py ${currentTicketNumber}")
              status = status.replaceAll("[\n\r]", "");
              println(status);
            }
          
          }
        }
      }
    }
  // create the jobs dynamically
  stage('build the UAT and prod jobs') {

    steps {

      script {

          // if the status value is equal to the target value then only build
          if(status.equals(params.FIELD_TARGET_VALUE) ){

              if(currentTicketNumber != currentBuild.previousBuild.buildVariables["ticketNumber"]){


                  echo "hello building...."

              }
          
          }
        }
      }
    }
  }
   
  post {
    always {
      echo "====++++always++++===="
    }
    success {
      echo "====++++only when successful ++++===="
    }
    failure {
      echo "====++++only when failed++++===="
    }
  }
}
